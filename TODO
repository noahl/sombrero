To do for Sombrero:

	- Change the layout system so that we can display two nodes without having to show everything in between them. A good way to start on this is to add the ability to delete nodes, while readjusting their containing layouts and handling their child layouts nicely - started
	- Integrate the trace generation part with the trace viewing part
	- There's a new Python library called ctypes that might be better than SWIG. Check it out.
		- Update: the version in Python 2.5 is pretty hackish, but it might get better. And SWIG is pretty hackish too. This is worth looking at more.
	- When the tracing interpreter evaluates an expression, it writes a partial trace and then returns a thunk to evaluate the expression and write the rest of the trace. This is important because in the case that an exception occurs within a nested expression, all of the parents of the expression that throws the exception should already be written to the trace when it is executed, so that the trace file will contain all of the information on the location of the exception. However, the current method of doing this is somewhat inconvenient. It might be worthwhile to consider others, and maybe switch to one if it seems better enough. Here are some ideas.
		- The theoretically ideal algorithm is (seems to be) this: when traversing the AST, make recursive calls to each nested expression as usual. When you get to the bottom and need to evaluate something, you *leave the entire stack in place* and just move execution back up and then back down again to write all the necessary traces before executing. This should be extremely fast.
		- I believe in Scheme you could express the ideal algorithm directly using continuations.
		- In Python, one option would be to pass unwritten trace nodes down instead of up by giving each eval procedure a procedure to call to write all parent nodes.
		- A more interesting option would be to change the order trace nodes are written and actually write the parent trace nodes before the children. This would be straightforward, since the parents would just be on the parent stack, and could be done quickly if you only wrote the trace nodes in memory, rather than to disk - which would be fairly simple since we write nodes to a memory buffer anyway before dumping them to disk. This would, however, require a few more primitive operations.
