# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Artutils
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


q_peek = _Artutils.q_peek
q_tag = _Artutils.q_tag
Literal = _Artutils.Literal
Variable = _Artutils.Variable
Constructor = _Artutils.Constructor
ConstrFields = _Artutils.ConstrFields
Abstract = _Artutils.Abstract
class SrcRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SrcRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SrcRef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srcname"] = _Artutils.SrcRef_srcname_set
    __swig_getmethods__["srcname"] = _Artutils.SrcRef_srcname_get
    if _newclass:srcname = _swig_property(_Artutils.SrcRef_srcname_get, _Artutils.SrcRef_srcname_set)
    __swig_setmethods__["line"] = _Artutils.SrcRef_line_set
    __swig_getmethods__["line"] = _Artutils.SrcRef_line_get
    if _newclass:line = _swig_property(_Artutils.SrcRef_line_get, _Artutils.SrcRef_line_set)
    __swig_setmethods__["column"] = _Artutils.SrcRef_column_set
    __swig_getmethods__["column"] = _Artutils.SrcRef_column_get
    if _newclass:column = _swig_property(_Artutils.SrcRef_column_get, _Artutils.SrcRef_column_set)
    __swig_setmethods__["lineend"] = _Artutils.SrcRef_lineend_set
    __swig_getmethods__["lineend"] = _Artutils.SrcRef_lineend_get
    if _newclass:lineend = _swig_property(_Artutils.SrcRef_lineend_get, _Artutils.SrcRef_lineend_set)
    __swig_setmethods__["columnend"] = _Artutils.SrcRef_columnend_set
    __swig_getmethods__["columnend"] = _Artutils.SrcRef_columnend_get
    if _newclass:columnend = _swig_property(_Artutils.SrcRef_columnend_get, _Artutils.SrcRef_columnend_set)
    def __init__(self, *args): 
        this = _Artutils.new_SrcRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Artutils.delete_SrcRef
    __del__ = lambda self : None;
SrcRef_swigregister = _Artutils.SrcRef_swigregister
SrcRef_swigregister(SrcRef)
cvar = _Artutils.cvar

class Ident(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ident, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ident, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idname"] = _Artutils.Ident_idname_set
    __swig_getmethods__["idname"] = _Artutils.Ident_idname_get
    if _newclass:idname = _swig_property(_Artutils.Ident_idname_get, _Artutils.Ident_idname_set)
    __swig_setmethods__["modname"] = _Artutils.Ident_modname_set
    __swig_getmethods__["modname"] = _Artutils.Ident_modname_get
    if _newclass:modname = _swig_property(_Artutils.Ident_modname_get, _Artutils.Ident_modname_set)
    __swig_setmethods__["srcname"] = _Artutils.Ident_srcname_set
    __swig_getmethods__["srcname"] = _Artutils.Ident_srcname_get
    if _newclass:srcname = _swig_property(_Artutils.Ident_srcname_get, _Artutils.Ident_srcname_set)
    __swig_setmethods__["fixity"] = _Artutils.Ident_fixity_set
    __swig_getmethods__["fixity"] = _Artutils.Ident_fixity_get
    if _newclass:fixity = _swig_property(_Artutils.Ident_fixity_get, _Artutils.Ident_fixity_set)
    __swig_setmethods__["arity"] = _Artutils.Ident_arity_set
    __swig_getmethods__["arity"] = _Artutils.Ident_arity_get
    if _newclass:arity = _swig_property(_Artutils.Ident_arity_get, _Artutils.Ident_arity_set)
    __swig_setmethods__["defnline"] = _Artutils.Ident_defnline_set
    __swig_getmethods__["defnline"] = _Artutils.Ident_defnline_get
    if _newclass:defnline = _swig_property(_Artutils.Ident_defnline_get, _Artutils.Ident_defnline_set)
    __swig_setmethods__["defncolumn"] = _Artutils.Ident_defncolumn_set
    __swig_getmethods__["defncolumn"] = _Artutils.Ident_defncolumn_get
    if _newclass:defncolumn = _swig_property(_Artutils.Ident_defncolumn_get, _Artutils.Ident_defncolumn_set)
    __swig_setmethods__["defnlineend"] = _Artutils.Ident_defnlineend_set
    __swig_getmethods__["defnlineend"] = _Artutils.Ident_defnlineend_get
    if _newclass:defnlineend = _swig_property(_Artutils.Ident_defnlineend_get, _Artutils.Ident_defnlineend_set)
    __swig_setmethods__["defncolumnend"] = _Artutils.Ident_defncolumnend_set
    __swig_getmethods__["defncolumnend"] = _Artutils.Ident_defncolumnend_get
    if _newclass:defncolumnend = _swig_property(_Artutils.Ident_defncolumnend_get, _Artutils.Ident_defncolumnend_set)
    __swig_setmethods__["isTraced"] = _Artutils.Ident_isTraced_set
    __swig_getmethods__["isTraced"] = _Artutils.Ident_isTraced_get
    if _newclass:isTraced = _swig_property(_Artutils.Ident_isTraced_get, _Artutils.Ident_isTraced_set)
    __swig_setmethods__["atomtype"] = _Artutils.Ident_atomtype_set
    __swig_getmethods__["atomtype"] = _Artutils.Ident_atomtype_get
    if _newclass:atomtype = _swig_property(_Artutils.Ident_atomtype_get, _Artutils.Ident_atomtype_set)
    def __init__(self, *args): 
        this = _Artutils.new_Ident(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Artutils.delete_Ident
    __del__ = lambda self : None;
Ident_swigregister = _Artutils.Ident_swigregister
Ident_swigregister(Ident)

finalise = _Artutils.finalise
openFile = _Artutils.openFile
sizeFile = _Artutils.sizeFile
readFO = _Artutils.readFO
readString = _Artutils.readString
q_readFO = _Artutils.q_readFO
q_readString = _Artutils.q_readString
q_init = _Artutils.q_init
readAtomAt = _Artutils.readAtomAt
readValueAt = _Artutils.readValueAt
readSRAt = _Artutils.readSRAt
q_skipNode = _Artutils.q_skipNode
currentfilepos = _Artutils.currentfilepos
infixPrint = _Artutils.infixPrint
openHatFile = _Artutils.openHatFile
closeHatFile = _Artutils.closeHatFile
getBridgeValue = _Artutils.getBridgeValue
getErrorLoc = _Artutils.getErrorLoc
errorMessage = _Artutils.errorMessage
versionNumber = _Artutils.versionNumber
getNodeType = _Artutils.getNodeType
parentNode = _Artutils.parentNode
getNm = _Artutils.getNm
getNmMod = _Artutils.getNmMod
getFixity = _Artutils.getFixity
isLiteral = _Artutils.isLiteral
isConstructor = _Artutils.isConstructor
isConstrFields = _Artutils.isConstrFields
isLambda = _Artutils.isLambda
isDoLambda = _Artutils.isDoLambda
identName = _Artutils.identName
identModName = _Artutils.identModName
identSrcFile = _Artutils.identSrcFile
identFixity = _Artutils.identFixity
identArity = _Artutils.identArity
identDefnLine = _Artutils.identDefnLine
identDefnCol = _Artutils.identDefnCol
identDefnLineEnd = _Artutils.identDefnLineEnd
identDefnColEnd = _Artutils.identDefnColEnd
identIsTraced = _Artutils.identIsTraced
getExpArity = _Artutils.getExpArity
getExpArg = _Artutils.getExpArg
peekExpArg = _Artutils.peekExpArg
getFieldLabel = _Artutils.getFieldLabel
getSrcRef = _Artutils.getSrcRef
getDefnRef = _Artutils.getDefnRef
peekTrace = _Artutils.peekTrace
getResult = _Artutils.getResult
getResultNoCycle = _Artutils.getResultNoCycle
peekResult = _Artutils.peekResult
srFile = _Artutils.srFile
srLine = _Artutils.srLine
srColumn = _Artutils.srColumn
srLineEnd = _Artutils.srLineEnd
srColumnEnd = _Artutils.srColumnEnd
ctrlC = _Artutils.ctrlC
fileoffset_compare = _Artutils.fileoffset_compare
findMainUse = _Artutils.findMainUse


