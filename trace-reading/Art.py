# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Art
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


Root = _Art.Root
Unevaluated = _Art.Unevaluated
Entered = _Art.Entered
Interrupted = _Art.Interrupted
Lambda = _Art.Lambda
DoLambda = _Art.DoLambda
HasSrcPos = _Art.HasSrcPos
IsEntered = _Art.IsEntered
LocalDef = _Art.LocalDef
HasFields = _Art.HasFields
TracedModule = _Art.TracedModule
Module = _Art.Module
SrcPos = _Art.SrcPos
ExpApp = _Art.ExpApp
ExpValueApp = _Art.ExpValueApp
ExpChar = _Art.ExpChar
ExpInt = _Art.ExpInt
ExpInteger = _Art.ExpInteger
ExpRat = _Art.ExpRat
ExpRational = _Art.ExpRational
ExpFloat = _Art.ExpFloat
ExpDouble = _Art.ExpDouble
ExpValueUse = _Art.ExpValueUse
ExpConstUse = _Art.ExpConstUse
ExpConstDef = _Art.ExpConstDef
ExpGuard = _Art.ExpGuard
ExpCase = _Art.ExpCase
ExpIf = _Art.ExpIf
ExpFieldUpdate = _Art.ExpFieldUpdate
ExpProjection = _Art.ExpProjection
ExpHidden = _Art.ExpHidden
ExpForward = _Art.ExpForward
ExpDoStmt = _Art.ExpDoStmt
AtomVariable = _Art.AtomVariable
AtomConstructor = _Art.AtomConstructor
AtomAbstract = _Art.AtomAbstract
ListCons = _Art.ListCons
eof = _Art.eof
False = _Art.False
True = _Art.True


